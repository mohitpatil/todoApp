{"version":3,"sources":["components/Navbar.js","components/List.js","components/Newtodo.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","List","props","console","log","Fragment","key","details","id","modText","dist_default","fromNow","ago","timeStamp","onClick","deleteTodo","Newtodo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","validate","inputError","state","modifiedText","setState","newText","addTodo","bind","assertThisInitialized","onChange","_this2","axios","get","then","res","data","catch","e","target","value","_this3","list","newList","Date","length","post","push","preventDefault","_this4","deleteID","delete","concat","_this5","noValidate","type","name","style","fontSize","color","map","todo","index","components_List","heading","Component","App","components_Navbar","components_Newtodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f7880a8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark mb-5\">\n            <span className=\"navbar-brand mb-0 h1 mx-auto\">Personalized todo list...</span>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport Moment from 'react-moment';\n\nconst List = (props) => {\n    console.log('props', props);\n\n    return (\n        <React.Fragment>\n        <br />\n        <div className=\"container\">\n        <div className=\"card border\">\n            <div className=\"card-body col-12\" key={props.details.id}>\n                <span className=\"float-left col-7\">{props.details.modText}</span>\n                <span className=\"col-3\">Added <Moment fromNow ago>{props.details.timeStamp}</Moment> ago </span>\n                <div className=\"float-right col-2\">\n                    <button className=\"btn btn-danger btn-sm btn-block\" onClick={props.deleteTodo}>Delete</button>\n                </div>\n\n            </div>\n        </div>    \n        </div>\n        </React.Fragment>\n    )\n}\n\nexport default List;","import React, { Component } from 'react';\nimport List from './List';\nimport axios from 'axios';\n\nclass Newtodo extends Component {\n    constructor() {\n        super();\n        this.state= {\n            newText : [\n                { \n                    \"modText\": \"First\",\n                    \"timeStamp\": \"12/12/2000\",\n                    \"id\" : 1\n                }\n            ],\n            modifiedText: '',\n            inputError: ''\n        }\n\n        this.addTodo = this.addTodo.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.deleteTodo = this.deleteTodo.bind(this);\n    }\n\n    componentDidMount() {\n        axios\n        .get(`http://5c74a0e7e24a2e001477f357.mockapi.io/TodoList`)\n        .then((res) => {\n            //console.log('API result', res.data);\n            this.setState({\n                newText : res.data\n            })\n        })\n        .catch((e) => {\n            console.log(e);\n        })\n    }\n\n    onChange (e) {\n        //console.log('Value:', e.target.value);\n        this.setState ({\n            modifiedText: e.target.value\n        })\n    }\n\n    validate = () =>{\n        let inputError = '';\n\n        if(!this.state.modifiedText) {\n            inputError = \"This field is required.\"\n        }\n\n        if(inputError) {\n            this.setState({inputError})\n            return false;\n        }\n        return true;\n    }\n\n    addTodo(e) {\n        const isValid = this.validate();\n        if(isValid) {\n        const list = this.state.newText;\n        const newList = {\n            modText: this.state.modifiedText,\n            timeStamp: new Date(),\n            id: this.state.newText.length + 1\n        } \n        //console.log('newList:', newList);\n        \n        axios\n        .post(`http://5c74a0e7e24a2e001477f357.mockapi.io/TodoList`, newList)\n        .then((res) =>{\n            list.push(newList);\n            this.setState({ \n                newText: list\n            });\n        })}\n        //console.log('New State:', this.state.newText);\n        e.preventDefault();\n        this.setState({\n            modifiedText: ''\n        })\n    }\n\n    deleteTodo(id) {\n        const list = this.state.newText;\n        const deleteID = list[id];\n        axios\n        .delete(`http://5c74a0e7e24a2e001477f357.mockapi.io/TodoList/${deleteID.id}`)\n        .then((res) =>{\n            delete list[id];\n            this.setState({ \n                newText: list\n            });\n        })\n\n        //console.log('list:', list, 'newText:', this.state.newText);\n    }\n\n    render () {\n        return (\n            <div className=\"container\">\n                <form noValidate>\n                    <input\n                    type=\"text\"\n                    name=\"modifiedText\"\n                    value={this.state.modifiedText}\n                    onChange={this.onChange.bind(this)}\n                    className=\"col-lg form-control\" />\n\n                    <div className=\"text-left\" style={{ fontSize: '12', color:'red'}}>{this.state.inputError}</div>\n                    <br/>\n                    <button className=\"btn btn-block btn-primary btn-md\" type=\"submit\" onClick={this.addTodo}>Add Note</button>\n                </form>\n                \n                <div>\n                    {this.state.newText.map((todo, index) => {\n                        return <List\n                            key={todo.id}\n                            details= {todo} \n                            heading=\"To do list\"\n                            deleteTodo = {() => {this.deleteTodo(index)}}\n                            />\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Newtodo;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Newtodo from './components/Newtodo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <Newtodo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}